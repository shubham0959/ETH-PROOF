# MycustomToken

My project is related to token creation to store details of my custom token and to manage it.

## Description

In this project of token creation first i have created a contract which will store the details of mycustom token such as token name, token symbol and total tokens. 
I had made these variables as public. 

Second step is A mapping named tokenBalances is declared. Mappings are key-value stores in Solidity.
The key is of type address, which represents the address of a wallet holding the token.
The value is of type uint256, which stores the number of tokens held by that address.

Third step It takes two arguments:
recipient: The address of the wallet that will receive the minted tokens.
amount: The number of tokens to be minted.
Inside the function:
totalTokens += amount;: This line increases the total supply of tokens by the amount.
tokenBalances[recipient] += amount;: This line adds the minted tokens to the recipient's balance in the mapping.

Forth step is to create another function named burn function. It takes two arguments:
owner: The address of the wallet that owns the tokens to be burned.
amount: The number of tokens to be burned.
Inside the function:
require(tokenBalances[owner] >= amount, "Insufficient balance to burn");: This line checks if the owner has enough tokens to burn (tokenBalances[owner]) before proceeding. It throws an error message ("Insufficient balance to burn") if the condition fails.
totalTokens -= amount;: This line decreases the total supply of tokens by the amount.
tokenBalances[owner] -= amount;: This line subtracts the burned tokens from the owner's balance in the mapping.

## Getting Started

### Executing program

To run this program, you can use Remix, an online Solidity IDE. To get started, go to the Remix website at https://remix.ethereum.org/.
Once you are on the Remix website, create a new file by clicking on the "+" icon in the left-hand sidebar. Save the file with a .sol extension (e.g., MyToken.sol). 
Copy and paste the following code into the file:
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract MyCustomToken {

    
    string public tokenName = "MyCustomToken";
    string public tokenSymbol = "MCT";
    uint256 public totalTokens;


    mapping(address => uint256) public tokenBalances;


    function mintTokens(address recipient, uint256 amount) public {
        totalTokens += amount;
        tokenBalances[recipient] += amount;
    }

    
    function burnTokens(address owner, uint256 amount) public {
        require(tokenBalances[owner] >= amount, "Insufficient balance to burn");
        totalTokens -= amount;
        tokenBalances[owner] -= amount;
    }
}
}



## Help

To compile the code, click on the "Solidity Compiler" tab in the left-hand sidebar. Make sure the "Compiler" option is set to "0.8.18" 
(or another compatible version), and then click on the "Compile MyToken.sol" button.

Once the code is compiled, you can deploy the contract by clicking on the "Deploy & Run Transactions" tab in the left-hand sidebar. 
Select the "Mytoken" contract from the dropdown menu, and then click on the "Deploy" button.

Once the contract is deployed, you can interact with it by calling the mint, burn function or check balance. Click on the "MyToken" 
contract in the left-hand sidebar, and then click on the "mint" or "burn" function. Finally, click on the "transact" button to execute the 
function and retrieve the token you burned or minted.

## Authors

Shubham
